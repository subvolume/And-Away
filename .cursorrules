# Claude's Guide to And Away Development

## Project Context
And Away is an iOS app for searching, collecting, and bookmarking places on a map.

**Technology Stack:**
- SwiftUI (latest version)
- Google Places Swift SDK for iOS (v10.0+) - NOT the legacy SDK
- iCloud for bookmark storage

## Operational Rules

### Priority Hierarchy
1. Follow user instructions exactly
2. Apply iOS/Swift best practices
3. Ask for clarification when conflicts arise
4. Never make unsolicited design changes

### Required Actions

**URL Processing:**
- When message contains URL → fetch contents FIRST before any other response
- Read fetched content completely before proceeding

**Bug Resolution Process:**
1. Fix reported bug
2. STOP and ask: "Please test and confirm the bug is resolved"
3. Wait for confirmation before continuing

**Code Implementation:**
- Present all code in artifacts for review
- Use existing styles/components from project structure
- Add descriptive comments to all code
- No extra features unless explicitly requested

### Decision Points

**When lacking context:**
- Ask specific questions about missing information
- Do not make assumptions
- Do not proceed without clarification

**When multiple approaches exist:**
- Explain trade-offs for each option
- Recommend preferred approach with reasoning
- Wait for user decision

**For architectural changes:**
- Explain reasoning and impact
- Request explicit approval before implementation

### Communication Protocol

**Before coding:**
- State what you plan to do
- Explain your approach
- Wait for approval if uncertain

**Code explanations:**
- Use simple language
- Include visual design analogies when helpful
- Focus on learning outcomes

**Questions format:**
- Be specific about what information you need
- Provide context for why you need it
- Suggest options when possible

## Project Structure Reference

```
And Away/
├── Resources/          # Color schemes, fonts, spacing constants
├── Views/Components/   # Reusable UI components  
└── Docs/              # Technical specifications
```

## Critical Constraints

- **No app access** - Cannot test code, must rely on user testing
- **Documentation first** - Check official docs over memory for current features
- **Design boundaries** - User handles ALL visual design decisions
- **Placeholder content** - Use plain text or ask for styling guidance
- **SDK-first approach** - Use built-in SDK features before creating custom solutions

### Documentation-First Mandate
**NEVER rely on memory for implementation details. Always check documentation first.**

**Required process for ANY coding task:**
1. State what documentation you need to check
2. Actually search/reference the relevant docs
3. Quote or reference the specific documentation section
4. Only then propose the solution

**Documentation priority order:**
1. Official platform documentation (Apple Developer, etc.)
2. SDK/library official documentation  
3. Current API references
4. Standard implementation examples

**Mandatory documentation check triggers:**
- Before writing any code
- When suggesting API usage
- When recommending architectural patterns
- When claiming "this is the standard way"

**Communication pattern:**
- Start with: "Let me check the [specific documentation] for this..."
- Reference: "According to [doc source], the recommended approach is..."
- Never: "I remember this can be done with..." or "Typically you would..."

**Memory vs Documentation:**
- Memory: General concepts, principles, patterns
- Documentation: Specific syntax, current APIs, exact implementations
- When in doubt: Documentation always wins over memory

## Response Patterns

**For new UI elements:**
"I'll create [component]. Should I use existing styles from Components/ or do you want to specify styling?"

**For unclear requirements:**
"I need clarification on [specific aspect] to proceed correctly. Options are: [A], [B], or [C]."

**For architectural decisions:**
"This change affects [impact area]. I recommend [approach] because [reasoning]. Approve to proceed?"